<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List 
		java.util.ArrayList 
    	java.util.Map		
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	IConnection conn = null;
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	if (outConns.size() > 0) {
		conn = outConns.get(0);
	}
	List<IMetadataColumn> listColumns = new ArrayList<IMetadataColumn>(); // dummy
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		listColumns = metadata.getListColumns();
		}
	}
	List<IMetadataColumn> listIncomingColumns = new ArrayList<IMetadataColumn>();
	IConnection inconn = null;
	List<? extends IConnection> inConns = NodeUtil.getIncomingConnections(node, IConnectionCategory.DATA);
	if (inConns.size() > 0) {
		inconn = inConns.get(0);
		IMetadataTable metadata = node.getMetadataFromConnector(inconn.getConnectorName());
		listIncomingColumns = metadata.getListColumns();
	}
	@SuppressWarnings("unchecked")
	List<Map<String, String>> configList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__COLUMN_CONFIG__");
    String docComp = ElementParameterParser.getValue(node, "__JSON_DOCUMENT__");
    String jsonPath = null;
    boolean useParentObject = "true".equals(ElementParameterParser.getValue(node, "__USE_PARENT_AS_CURRENT_OBJECT__"));
    if (useParentObject) {
		jsonPath = "\".\"";
    } else {
   		jsonPath = ElementParameterParser.getValue(node, "__PARENT_JSON_PATH__");
	   	if (jsonPath == null || jsonPath.trim().isEmpty()) {
			jsonPath = "null";
		}
   	}
   	boolean provideEmptyNode = "true".equals(ElementParameterParser.getValue(node, "__PROVIDE_EMPTY_OUTPUT_IF_PARENT_DOES_NOT_EXISTS__"));
   	boolean dieIfParentNotExists = 	"true".equals(ElementParameterParser.getValue(node, "__DIE_IF_PARENT_JSON_PATH_DOES_NOT_EXISTS__"));
   	if (provideEmptyNode) {
   		dieIfParentNotExists = false;
   	}
   	boolean dieIfParentIsEmpty = "true".equals(ElementParameterParser.getValue(node, "__DIE_IF_PARENT_JSON_OBJECT_IS_EMPTY__"));
   	if (provideEmptyNode) {
   		dieIfParentIsEmpty = false;
   	}
    boolean log4jEnabled = "true".equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__")) && 
   						   "JOBLET".equals(node.getComponent().getComponentType().toString()) == false;
   	boolean provideValuesAsList = "true".equals(ElementParameterParser.getValue(node, "__PROVIDE_VALUES_AS_COMMA_SEP_LIST__"));
   	boolean arrayOfArrays = "ARRAY_OF_ARRAYS".equals(ElementParameterParser.getValue(node, "__INPUT_STRUCTURE__"));
   	String defaultLocale = ElementParameterParser.getValue(node, "__DEFAULT_LOCALE__");
   	if (defaultLocale == null || defaultLocale.trim().isEmpty()) {
   		defaultLocale = "null";
   	} %>
	globalMap.remove("<%=cid%>_CURRENT_NODE");
	globalMap.remove("<%=cid%>_CURRENT_PATH");
	globalMap.put("<%=cid%>_NB_LINE", 0);
	globalMap.put("<%=cid%>_COUNT_OBJECTS", 0);
	globalMap.put("<%=cid%>_PARENT_ATTRIBUTE_EXISTS", false);
	de.jlo.talendcomp.json.JsonDocument <%=cid%> = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("<%=docComp%>");
	com.fasterxml.jackson.databind.JsonNode parentNode_<%=cid%> = null;
	if (<%=cid%> != null) {
		try {
			<%=cid%> = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("<%=docComp%>");
			globalMap.put("<%=cid%>", <%=cid%>);
	   		String jsonPath = <%=jsonPath%>;
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("<%=docComp%>_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("<%=docComp%>_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("<%=docComp%>_CURRENT_PATH");
	   		}
	   		globalMap.put("<%=cid%>_CURRENT_PATH", path);
	   		<%=cid%>.setCurrentPath(path);
			// get the parent object we have to dock on
	   		com.fasterxml.jackson.databind.JsonNode entryNode_<%=cid%> = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("<%=docComp%>_CURRENT_NODE");
			parentNode_<%=cid%> = <%=cid%>.getNode(entryNode_<%=cid%>, jsonPath, false);
			if (parentNode_<%=cid%> == null) {
<%	if (dieIfParentNotExists) { %>
				throw new Exception("Path: " + path + " does not exist or is null!");
<%	} else { %>
				globalMap.put("<%=cid%>_PARENT_ATTRIBUTE_EXISTS", false);
<%	} %>
			} else {
				globalMap.put("<%=cid%>_PARENT_ATTRIBUTE_EXISTS", true);
			}
			globalMap.put("parent_node_<%=cid%>", parentNode_<%=cid%>);
			globalMap.put("<%=cid%>_NB_LINE", 0);
		} catch (Exception e) {
<%	if (log4jEnabled) { %>
			log.error(currentComponent + ": " + e.getMessage(), e);
<%	} %>
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
	} else {
   		throw new Exception("No JSON document received from the parent component: <%=docComp%>. This is a misconfiguration within the job!");
	}
	java.util.List<com.fasterxml.jackson.databind.JsonNode> listNodes_<%=cid%> = <%=cid%>.getArrayValuesAsList(parentNode_<%=cid%>, false, <%=(arrayOfArrays == false)%>);
	globalMap.put("<%=cid%>_COUNT_OBJECTS", listNodes_<%=cid%>.size());
	if (listNodes_<%=cid%>.isEmpty()) {
<%	if (dieIfParentIsEmpty) { %>
		throw new Exception("The referenced object: " + <%=jsonPath%> + " is empty!");
<%	} else if (provideEmptyNode) { %>
		listNodes_<%=cid%>.add(<%=cid%>.createEmptyNode());
<%	} %>
	}
<%	if (provideValuesAsList) { %>
	java.util.List<Object> <%=cid%>_valueList = new java.util.ArrayList<Object>();
	globalMap.put("valueList_<%=cid%>", <%=cid%>_valueList);
<%	} %>
	globalMap.put("<%=cid%>_NB_NOT_NULL_ATTRIBUTES", 0);
	<%=cid%>.setDefaultLocale(<%=defaultLocale%>);
	for (com.fasterxml.jackson.databind.JsonNode currentNode_<%=cid%> : listNodes_<%=cid%>) {
		// loop over the given children of the parent node or the values of the array
		int countNotNullAttributes_<%=cid%> = 0;
		try {
<%	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		Map<String, String> config = configList.get(i);
		String fieldName = config.get("ATTRIBUTE_ALIAS");
		if (fieldName == null || fieldName.trim().isEmpty()) {
			fieldName = "null";
		}
		String fieldLabel = "\"" + mc.getLabel()  + "\"";
		String arrayIndex = config.get("ARRAY_INDEX");
		if (arrayIndex == null || arrayIndex.trim().isEmpty()) {
			arrayIndex = String.valueOf(i);
		}
		String pattern = mc.getPattern();
		if (pattern == null || pattern.trim().isEmpty()) {
			pattern = "null";
		}
		String javaClassName = mc.getTalendType().substring(3);
		String javaPackageClassName = JavaTypesManager.getTypeToGenerate(mc.getTalendType(), true);
		boolean isDateValue = javaClassName.contains("Date");
		boolean ignore = "false".equals(config.get("USE"));
		boolean allowMissing = "true".equals(config.get("MISSING_ATTRIBUTE_ALLOWED"));
		String missingAttributeValue = config.get("MISSING_ATTRIBUTE_REPLACEMENT");
		if (allowMissing == false || missingAttributeValue == null || missingAttributeValue.trim().isEmpty()) {
			missingAttributeValue = "null";
		}
		boolean isNullable = mc.isNullable();
		if (ignore) {
			boolean contains = false;
			for (IMetadataColumn incol : listIncomingColumns) {
				if (incol.getLabel().equals(mc.getLabel())) {
	      			if (conn != null) { %>
		<%=conn.getName()%>.<%=mc.getLabel()%> = <%=inconn.getName()%>.<%=incol.getLabel()%>;
<%       			}
					break;
				}
			}
			continue;
		} %>
			{
<%		if (arrayOfArrays) { %>
				Integer position = <%=arrayIndex%>;
<%		} else { %>
				String position = <%=fieldName%>;
				if (position == null || position.trim().isEmpty()) {
					position = <%=fieldLabel%>;
				}
<%		} %>
<%		if (isDateValue) { %>
				<%=javaPackageClassName%> var = <%=cid%>.getValueAsDate(currentNode_<%=cid%>, position, <%=isNullable%>, <%=allowMissing%>, <%=missingAttributeValue%>, <%=pattern%>);
				globalMap.put("<%=cid%>.<%=mc.getLabel()%>", var);
<%			if (provideValuesAsList) { %>
				if (var != null) {
					<%=cid%>_valueList.add(var);
				}
<%			} %>
<%      	if (conn != null) { %>
				<%=conn.getName()%>.<%=mc.getLabel()%> = var;
<%       	} %>
<%		} else { %>
				<%=javaPackageClassName%> var = <%=cid%>.getValueAs<%=javaClassName%>(currentNode_<%=cid%>, position, <%=isNullable%>, <%=allowMissing%>, (<%=javaClassName%>) <%=missingAttributeValue%>);
				globalMap.put("<%=cid%>.<%=mc.getLabel()%>", var);
<%			if (provideValuesAsList) { %>
				if (var != null) {
					<%=cid%>_valueList.add(var);
				}
<%			} %>
<%      	if (conn != null) { %>
				<%=conn.getName()%>.<%=mc.getLabel()%> = var;
<%       	} %>
<%		} %>
				if (var != null) {
					countNotNullAttributes_<%=cid%>++;
				}
			}
<%	} // for %>
			globalMap.put("<%=cid%>_CURRENT_NODE", currentNode_<%=cid%>);
			Integer counter = (Integer) globalMap.get("<%=cid%>_NB_LINE");
			globalMap.put("<%=cid%>_NB_LINE", counter.intValue() + 1);
			globalMap.put("<%=cid%>_NB_NOT_NULL_ATTRIBUTES", countNotNullAttributes_<%=cid%>);
		} catch (Exception e) {
<% 	if (log4jEnabled) { %>
			log.error(currentComponent + ": " + e.getMessage(), e);
<% 	} %>
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
			throw e;
		}

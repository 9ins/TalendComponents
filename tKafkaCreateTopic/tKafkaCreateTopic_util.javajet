<%@ jet
    imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.HashMap
"
%>

<%
class TKafkaCreateTopicUtil {

	private INode node;

	private INode connNode;

	private Map<String, String> kafkaTopicProperties;

	public TKafkaCreateTopicUtil(INode node) {
		this.node = node;
		this.kafkaTopicProperties = findKafkaTopicProperties();
		this.connNode = Boolean.valueOf(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"))
			? ElementParameterParser.getLinkedNodeValue(node, "__CONNECTION__")
			: node;
	}

	public boolean isCreate() {
		return "CREATE_TOPIC".equals(ElementParameterParser.getValue(node, "__TOPICACTION__")) || isCreateIfNotExists();
	}

	public boolean isCreateIfNotExists() {
		return "CREATE_IF_NOT_EXISTS".equals(ElementParameterParser.getValue(node, "__TOPICACTION__"));
	}

	public boolean isAlter() {
		return "ALTER_TOPIC".equals(ElementParameterParser.getValue(node, "__TOPICACTION__"));
	}

	public String getZookeeperConnect() {
		return ElementParameterParser.getValue(connNode, "__ZOOKEEPER_CONNECT__");
	}

	public boolean isRetentionSet() {
		return "true".equals(ElementParameterParser.getValue(node, "__KAFKA_RETENTION_CHECK__"));
	}
	
	public boolean isZookeeperSecurityEnabled() {
		return "true".equals(ElementParameterParser.getValue(node, "__ZOOKEEPER_SECURITY_IS_ENABLED__"));
	}

	public String getRetention() {
		return ElementParameterParser.getValue(node, "__KAFKA_RETENTION__");
	}

	public String getTopic() {
		return ElementParameterParser.getValue(node, "__KAFKA_TOPIC__");
	}

	public String getReplicationFactor() {
		return ElementParameterParser.getValue(node, "__KAFKA_REPLICATION__");
	}

	public String getNbPartitions() {
		return ElementParameterParser.getValue(node, "__KAFKA_PARTITION__");
	}

	public Map<String, String> getKafkaTopicProperties(){
		return this.kafkaTopicProperties;
	}
	
	public boolean isKafkaVersion(String version) {
		return (version != null) ? version.equals(ElementParameterParser.getValue(connNode, "__KAFKA_VERSION__")) : false;
	}

	private Map<String, String> findKafkaTopicProperties() {
		Map<String, String> result = new HashMap<String, String>();
		List<Map<String, String>> topicPropertiesFromStudio = (List<Map<String, String>>) ElementParameterParser
		        .getObjectValue(node, "__KAFKA_TOPIC_PROPERTIES__");
		for (Map<String, String> topicPropertyFromStudio : topicPropertiesFromStudio) {
		    result.put(topicPropertyFromStudio.get("PROPERTY"), topicPropertyFromStudio.get("VALUE"));
		}
		return result;
   }
}
%>
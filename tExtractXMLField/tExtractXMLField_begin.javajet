<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.utils.NodeUtil
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
	int schemaOptNum=100;
	String schemaOptNumStr=ElementParameterParser.getValue(node, "__SCHEMA_OPT_NUM__");
	if(schemaOptNumStr!=null && !"".equals(schemaOptNumStr) && !"\"\"".equals(schemaOptNumStr)){
		schemaOptNum  = Integer.parseInt(schemaOptNumStr);
	}
	String xmlField = ElementParameterParser.getValue(node, "__XMLFIELD__");

	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;
	boolean ignore_NS_Str = ("true").equals(ElementParameterParser.getValue(node, "__IGNORE_NS__"));
	IConnection inConn = null;
	List< ? extends IConnection> inConns = node.getIncomingConnections();
	List<IMetadataColumn> inColumns = null;
	if (inConns!=null) {
		for (IConnection incomingConn : inConns) {
			if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				inConn = incomingConn;
				inColumns = inConn.getMetadataTable().getListColumns();
				break;
			}
		}
	}
%>
int nb_line_<%=cid%> = 0;

class NameSpaceTool_<%=cid%> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                   	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    /**
	 *	the regex for the xpath like that : 
	 *	case 1 : functionA(locationXPathExpression) 
	 *	case 2 : fn:functionA(locationXPathExpression) 
	 *	case 3 : functionA(functionB(locationXPathExpression))
	 *	case 4 : fn:functionA(fn:functionB(locationXPathExpression))
	 *	and like that.
	*/
	private java.util.regex.Pattern simpleFunctionPattern;
	private StringBuffer stringBuffer;
	private java.util.Map<String,String> resultCache;
	
	public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
	    if (defualtNSPath.size() < 1) {
        	return xpathExpression;
    	}
    	
    	if(resultCache == null) {
    		resultCache = new java.util.HashMap<String,String>();
    	}
    	
    	String resultXpathExpression = resultCache.get(xpathExpression);
		if(resultXpathExpression!=null) {
    		return resultXpathExpression;
    	}
    	
    	String locationPathExpression = xpathExpression;
    	
    	if(simpleFunctionPattern == null) {
    		simpleFunctionPattern = java.util.regex.Pattern.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
    	}
    	
    	boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
    	String tail = null;
    	if(isSimpleFunctionXPath) {
			int start = xpathExpression.lastIndexOf('(');
			int end = xpathExpression.indexOf(')');
			if(start < end) {
			    if(stringBuffer == null) {
    				stringBuffer = new StringBuffer();
    			}
				locationPathExpression = xpathExpression.substring(start+1,end);
				stringBuffer.append(xpathExpression.substring(0,start+1));
				tail = xpathExpression.substring(end);
			} else {
				isSimpleFunctionXPath = false;
			}
    	}
    	
    	locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,loopPath);
    	
    	resultXpathExpression = locationPathExpression;
    	
    	if(isSimpleFunctionXPath) {
        	stringBuffer.append(locationPathExpression);
    		stringBuffer.append(tail);
    		resultXpathExpression = stringBuffer.toString();
    		stringBuffer.setLength(0);
        }
    	
    	resultCache.put(xpathExpression,resultXpathExpression);
    	return resultXpathExpression;
	}
	
    private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
    	String fullPath = loopPath;
    	if(!path.equals(fullPath)){
        	for (String tmp : path.split("/")) {
        		if (("..").equals(tmp)) {
                    fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                } else {
                    fullPath += "/" + tmp;
                }
        	}
        }
    	int[] indexs = new int[fullPath.split("/").length - 1];
        java.util.Arrays.fill(indexs, -1);
        int length = 0;
        for (int i = 0; i < defualtNSPath.size(); i++) {
            if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                length = defualtNSPath.get(i).length();
            }
        }
    
        StringBuilder newPath = new StringBuilder();
        String[] pathStrs = path.split("/");
        for (int i = 0; i < pathStrs.length; i++) {
            String tmp = pathStrs[i];
            if (newPath.length() > 0) {
                newPath.append("/");
            }
            if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                int index = indexs[i + indexs.length - pathStrs.length];
                if (index >= 0) {
                	//==== add by wliu to support both filter and functions==
    				if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
    					String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
    					newPath.append(tmpStr);
    				}else{
    					if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
    						newPath.append(tmp);
    					}else{
    				//==add end=======	
                    		newPath.append("pre").append(index).append(":").append(tmp);
                    	}
                    }                    
                } else {
                    newPath.append(tmp);
                }
            } else {
                newPath.append(tmp);
            }
        }
        return newPath.toString();
    }
    
	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}
	
}

class XML_API_<%=cid%>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
<%
String rejectConnName = "";
List<IMetadataColumn> rejectColumnList = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectColumnList = rejectConn.getMetadataTable().getListColumns();
    rejectConnName = rejectConn.getName(); 
}

IConnection outConn = null;
String firstConnName = "";
List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		outConn = conn;
    		firstConnName = outConn.getName();
    		break;
    	}
    }
}
if (outConn!=null) {
	if(schemaOptNum < mapping.size()){//whether to optimize
		if(inConn!=null){
			int unExtractColNo=0;
			for (int i=0;i<mapping.size();i++) { 
				if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
					String query = mapping.get(i).get("QUERY");
					if(query==null || query.trim().length()<1){
						for(IMetadataColumn inColumn:inColumns) {
							if (inColumn.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								if(unExtractColNo%schemaOptNum==0){
%>
			public void putUnExtractValue_<%=unExtractColNo/schemaOptNum%>(<%=NodeUtil.getPrivateConnClassName(outConn)%>Struct <%=firstConnName%>,<%=NodeUtil.getPrivateConnClassName(inConn)%>Struct <%=inConn.getName()%>){
<%
								}
%>
				<%=firstConnName%>.<%=inColumn.getLabel()%> = <%=inConn.getName() %>.<%=inColumn.getLabel()%>;
<%
								if((unExtractColNo+1)%schemaOptNum==0){
%>
			}
<%
								}
								unExtractColNo++;
								break;
							}
						}
					}
				}
			}
			if(unExtractColNo>0&&(unExtractColNo%schemaOptNum)>0){
%>
			}
<%
			}
		}
		int extractColNo=0;
		for (int i=0;i<mapping.size();i++) {  //for S_0
			String query = mapping.get(i).get("QUERY");
			String nodeCheck = mapping.get(i).get("NODECHECK");
			if(query!=null && query.trim().length()>0){  // if S_0_0
				if(extractColNo%schemaOptNum==0){
%>
			public void putExtractValue_<%=extractColNo/schemaOptNum%>(<%=NodeUtil.getPrivateConnClassName(outConn)%>Struct <%=firstConnName%>,<%if(inConn!=null){%><%=NodeUtil.getPrivateConnClassName(inConn)%>Struct <%=inConn.getName()%>,<%}%>
				String xmlStr_<%=cid%>,org.dom4j.tree.AbstractNode temp_<%=cid %>,NameSpaceTool_<%=cid%> nsTool_<%=cid%>,String loopQuery_<%=cid %>,java.util.HashMap xmlNameSpaceMap_<%=cid%>,org.dom4j.Node node_<%=cid %>,
					String str_<%=cid %>,XML_API_<%=cid%> xml_api_<%=cid%><%if(ignore_NS_Str){%>,org.jaxen.NamespaceContext namespaceContext_<%=cid%><%}%>)throws java.lang.Exception {
				
					boolean resultIsNode_<%=cid%> = true;
<%
				}
%>
				org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=query%>,loopQuery_<%=cid %>));
			    xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>);
				<%if(ignore_NS_Str){%>
					xTmp<%=i%>_<%=cid%>.setNamespaceContext(namespaceContext_<%=cid%>);
				<%}%>
			    Object obj<%=i%>_<%=cid%> = xTmp<%=i%>_<%=cid%>.evaluate(temp_<%=cid%>);
			    if(obj<%=i%>_<%=cid%> instanceof String || obj<%=i%>_<%=cid%> instanceof Number){
			    	resultIsNode_<%=cid%> = false;
    				str_<%=cid %> = String.valueOf(obj<%=i%>_<%=cid%>);
   				}else{
   					resultIsNode_<%=cid%> = true;
				    node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
<%
					if(("true").equals(nodeCheck)){
%>
					str_<%=cid %> = node_<%=cid %>==null?null:node_<%=cid %>.asXML();
<%
					}else{
%>
				    str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid %>);
<%
					}
%>
				}
<%
				for(IMetadataColumn column:outConn.getMetadataTable().getListColumns()) { // for S_0_0_0
					if (mapping.get(i).get("SCHEMA_COLUMN")!=null) { // if S_0_0_0_0
						if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) { //if S_0_0_0_0_0
	        				
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							
							boolean isNotSetDefault = false;
							String defaultValue=column.getDefault();
							if(defaultValue!=null){
								isNotSetDefault = defaultValue.length()==0;
							}else{
								isNotSetDefault=true;
							}
							
							if(("true").equals(nodeCheck)){
								if(!("id_Document".equals(column.getTalendType()))) { 
%>
									<%=firstConnName %>.<%=column.getLabel() %> = str_<%=cid %>;
<%
								} else {
%>
									<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Document(str_<%=cid %>);
<%
								}
	            				continue;
	            			}
							if(javaType == JavaTypesManager.STRING){
								if(column.isNullable()){
%>
									if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=firstConnName %>.<%=column.getLabel() %> =null;
									}else if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=firstConnName %>.<%=column.getLabel() %> ="";
									}else if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=firstConnName %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault()%>;
									}else{
<%
								}else{ // column.isNullable()
%>
									if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=firstConnName %>.<%=column.getLabel() %> ="";
									}else if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=firstConnName %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
									}else{
<%
								}
							}else{ // other type
								if(column.isNullable()){
%>	
										if(resultIsNode_<%=cid%> && xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=firstConnName %>.<%=column.getLabel() %> =null;
										}else if(resultIsNode_<%=cid%> && (xml_api_<%=cid%>.isEmpty(node_<%=cid%>) || xml_api_<%=cid%>.isMissing(node_<%=cid%>))){
											<%=firstConnName %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
										}else{
<%
								}else{ // column.isNullable()
%>
										if(resultIsNode_<%=cid%> && (xml_api_<%=cid%>.isMissing(node_<%=cid%>) || xml_api_<%=cid%>.isEmpty(node_<%=cid%>))){
											<%=firstConnName %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
										}else{
<%
								}
							}
									
							if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
				<%=firstConnName%>.<%=column.getLabel() %> = str_<%= cid %>;
<%
							} else {
								if (javaType == JavaTypesManager.DATE) {
%>
				<%=firstConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%= cid %>, <%= patternValue %>);
<%
								} else {
%>
				<%=firstConnName%>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%= cid %>);
<%
								}
							}
%>
									}
<%
							break;
	        			} // if S_0_0_0_0_1
					} // if S_0_0_0_1
				} // for S_0_0_1
				if((extractColNo+1)%schemaOptNum==0){
%>
			}
<%
				}
				extractColNo++;
			}// if S_0_1
		} // for S_1
		if(extractColNo >0&&(extractColNo%schemaOptNum)>0){
%>
			}
<%
		}
		if(!dieOnError && !("").equals(rejectConnName) && rejectColumnList != null && rejectColumnList.size() > 0) {//reject before extract
			if(inConn!=null){
				int columnNo=0;
		 		for(IMetadataColumn column : outConn.getMetadataTable().getListColumns()) {
	    	  		if(!xmlField.equals(column.getLabel())){
	    	  			for(IMetadataColumn inColumn : inConn.getMetadataTable().getListColumns()){
	    	  				if(inColumn.getLabel().equals(column.getLabel())){
	    	  					if(columnNo%schemaOptNum==0){
%>
			public void putRejectValueBeforeExtract_<%=columnNo/schemaOptNum%>(<%=rejectConnName%>Struct <%=rejectConnName%>,<%=NodeUtil.getPrivateConnClassName(inConn)%>Struct <%=inConn.getName()%>){
<%
		 						}
%>
    			<%=rejectConnName%>.<%=column.getLabel()%> = <%=inConn.getName() %>.<%=column.getLabel()%>;
<%
	    						if((columnNo+1)%schemaOptNum==0){
%>
			}
<%
								}
								columnNo++;
								break;
	    					}
	    				}
	    			}
	    	    }
				if(columnNo>0&&(columnNo%schemaOptNum)>0){
%>
			}
<%
				}
	    	}
		}//reject before extract
		
		if(!dieOnError && !("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {//reject extract
	    	int columnNo=0;
    	 	for(IMetadataColumn column : outConn.getMetadataTable().getListColumns()) {
    	 		if(columnNo%schemaOptNum==0){
%>
			public void putRejectValueAfterExtract_<%=columnNo/schemaOptNum%>(<%=rejectConnName%>Struct <%=rejectConnName%>,<%=firstConnName %>Struct <%=firstConnName %>){
<%
		 		}
%>
     			<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
				if((columnNo+1)%schemaOptNum==0){
%>
			}
<%
				}
				columnNo++;
    	    }
			if(columnNo>0&&(columnNo%schemaOptNum)>0){
%>
			}
<%
			}
		}//reject extract
		
	}//whether to optimize
}
%>
}

XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
<%
	if(ignore_NS_Str){
%>
	class XML_NS_RMV_<%=cid %>{	

		public void removeNamespace(org.dom4j.Document reader,
				org.dom4j.Document writer) {
			org.dom4j.Element elemReader = reader.getRootElement();
			org.dom4j.Element elemTo = writer.addElement(elemReader
					.getName());
			if(elemReader!=null && elemReader.getText()!=null && !"".equals(elemReader.getText())){
				elemTo.setText(elemReader.getText());
			}
			for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) elemReader
					.attributes()) {
				elemTo.addAttribute(attri.getName(),attri.getText());
			}
			removeSubNamespace(elemReader, elemTo);
		}

		public void removeSubNamespace(org.dom4j.Element elemFrom,
				org.dom4j.Element elemTo) {
			for (org.dom4j.Element subFrom : (List<org.dom4j.Element>) elemFrom
					.elements()) {
				org.dom4j.Element tmpElemTo = elemTo.addElement(subFrom
						.getName());
				if(subFrom!=null && subFrom.getText()!=null && !"".equals(subFrom.getText())){
					tmpElemTo.setText(subFrom.getText());
				}
				for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) subFrom
						.attributes()) {
					tmpElemTo.addAttribute(attri.getName(),attri.getText());
				}
				removeSubNamespace(subFrom, tmpElemTo);
			}
		}
	}
	XML_NS_RMV_<%=cid %> XML_ns_rmv_<%=cid %> = new XML_NS_RMV_<%=cid %>();
	org.jaxen.NamespaceContext namespaceContext_<%=cid%> = new org.jaxen.NamespaceContext() {
		public String translateNamespacePrefixToUri(String prefix) { 
			return "";//ignore prefix in xpath when evaluate
		}
	};
<%
	}
%>
<%@ jet
imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		java.util.List
		java.util.Map
		java.util.Set
		java.util.HashSet
"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid =  node.getUniqueName();
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
String propagateRecordset = ElementParameterParser.getValue(node,"__PROPAGATE_RECORD_SET__");
String recordsetColumn = ElementParameterParser.getValue(node,"__RECORD_SET_COLUMN__");
boolean useTransaction = !("false").equals(ElementParameterParser.getValue(node,"__USE_TRANSACTION__"));
boolean usePrepareStatement = "true".equals(ElementParameterParser.getValue(node,"__USE_PREPAREDSTATEMENT__"));
String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
dbquery = org.talend.core.model.utils.NodeUtil.replaceCRLFInMEMO_SQL(dbquery);
List<Map<String, String>> prepareStatementParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SET_PREPAREDSTATEMENT_PARAMETERS__");
String use_NB_Line = ElementParameterParser.getValue(node, "__USE_NB_LINE__");
String incomingConnName = null;
Set<String> inputCols = new HashSet<String>();
List<IMetadataColumn> columnList = null;
String rejectConnName = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
	IConnection rejectConn = rejectConns.get(0);
	rejectConnName = rejectConn.getName();
}
List<IMetadataColumn> rejectColumnList = null;
IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
if(metadataTable != null) {
	rejectColumnList = metadataTable.getListColumns();
}
List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
boolean hasOutgoingDataConnection = false;
for(IConnection conn : outgoingConns) {
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		if(!hasOutgoingDataConnection){
			hasOutgoingDataConnection = true;
		}
		%>
		<%=conn.getName() %> = null;
		<%
	}
}
log4jCodeGenerateUtil.query(node);
%>
query_<%=cid %> = <%=dbquery%>;
whetherReject_<%=cid%> = false;
<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List< ? extends IConnection> conns = node.getIncomingConnections();
		columnList = metadata.getListColumns();
		if(conns != null && conns.size()>0){
			IConnection conn = conns.get(0);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				incomingConnName = conn.getName();
				IMetadataTable inputMetadataTable = conn.getMetadataTable();
				for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
					inputCols.add(inputCol.getLabel());
				}
			}
		}//end of connection size.
	}//end of metadatas
}
if(!hasOutgoingDataConnection || columnList == null || columnList.size() < 1){
	propagateRecordset = "false";
}
%>
globalMap.put("<%=cid %>_QUERY",query_<%=cid %>);
<%
if(("true").equals(propagateRecordset)){
	%>
	java.sql.ResultSet rs_<%=cid %> = null;
	<%
}
%>
try {
<%
	if (usePrepareStatement) {
		if(prepareStatementParameters.size()>0){
			log4jCodeGenerateUtil.logInfo(node,"debug","| Prameter Index | Prameter Type | Parameter Value |");
		}
		for (Map<String, String> param : prepareStatementParameters) {
			log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - | "+param.get("PARAMETER_INDEX")+" | "+param.get("PARAMETER_TYPE")+" | \"+"+param.get("PARAMETER_VALUE")+"+\" |");
			if ("Date".equals(param.get("PARAMETER_TYPE"))) {
%>
			pstmt_<%=cid %>.setTimestamp(<%=param.get("PARAMETER_INDEX")%>,new java.sql.Timestamp(<%=param.get("PARAMETER_VALUE")%>.getTime()));
<%
			} else {
%>
			pstmt_<%=cid %>.set<%=param.get("PARAMETER_TYPE")%>(<%=param.get("PARAMETER_INDEX")%>,<%=param.get("PARAMETER_VALUE")%>);
<%
			}
		}
		if(("true").equals(propagateRecordset)){
%>
		rs_<%=cid %> = pstmt_<%=cid %>.executeQuery();
<%
		} else {
%>
		pstmt_<%=cid %>.execute();
		<%
		}
	} else {
		if(("true").equals(propagateRecordset)){
%>
		rs_<%=cid %> = stmt_<%=cid %>.executeQuery(query_<%=cid %>);
<%
		} else {
%>
		stmt_<%=cid %>.execute(query_<%=cid %>);
		<%
		}
	}
	log4jCodeGenerateUtil.logInfo(node,"debug",cid+" - Execute the query: '\" + "+dbquery +" + \"' has finished.");
%>
<%
	if(usePrepareStatement){
		if ("NB_LINE_INSERTED".equals(use_NB_Line)) {
%>
		nb_line_inserted_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_INSERTED", nb_line_inserted_<%=cid%>);
<%
		} else if ("NB_LINE_UPDATED".equals(use_NB_Line)) {
%>
		nb_line_update_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_UPDATED", nb_line_update_<%=cid%>);
<%
		} else if ("NB_LINE_DELETED".equals(use_NB_Line)) {
%>
		nb_line_deleted_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_DELETED", nb_line_deleted_<%=cid%>);
<%
		}
	} else {
		if ("NB_LINE_INSERTED".equals(use_NB_Line)) {
%>
		nb_line_inserted_<%=cid%> += stmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_INSERTED", nb_line_inserted_<%=cid%>);
<%
		} else if ("NB_LINE_UPDATED".equals(use_NB_Line)) {
%>
		nb_line_update_<%=cid%> += stmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_UPDATED", nb_line_update_<%=cid%>);
<%
		} else if ("NB_LINE_DELETED".equals(use_NB_Line)) {
%>
		nb_line_deleted_<%=cid%> += stmt_<%=cid %>.getUpdateCount();
		globalMap.put("<%=cid%>_NB_LINE_DELETED", nb_line_deleted_<%=cid%>);
<%
		}
	}
%>
	} catch (java.lang.Exception e) {
		whetherReject_<%=cid%> = true;
		<%
		if (("true").equals(dieOnError)) {
			%>
			throw(e);
			<%
		} else {
			if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
				%>
				<%=rejectConnName %> = new <%=rejectConnName %>Struct();
				<%
				if(incomingConnName!=null){
					for(IMetadataColumn column : columnList) {
						if (inputCols.contains(column.getLabel())) {
						%>
						<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
						<%
						}
					}
					}
				%>
				<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
				<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
				<%
			} else {
				log4jCodeGenerateUtil.logError(node,"error");
				%>
				System.err.print(e.getMessage());
				<%
			}
		}
		%>
	}
	<%
if(outgoingConns != null && outgoingConns.size() > 0) {
	%>
	if(!whetherReject_<%=cid%>) {
		<%
		for(IConnection outgoingConn : outgoingConns) {
			if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
				if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					%>
					<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
					<%
					for(IMetadataColumn column : columnList) {
						if(("true").equals(propagateRecordset) && column.getLabel().equals(recordsetColumn)){
							%>
							<%=outgoingConn.getName()%>.<%=column.getLabel()%> = rs_<%=cid %>;
							<%
						} else {
							if(incomingConnName!=null){
								if (inputCols.contains(column.getLabel())) {
							%>
							<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
								}
							}
						}
					}
				}
			}
		}
		%>
	}
	<%
}
if(!("true").equals(useExistingConn) && useTransaction) {
	if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
		%>
		commitCounter_<%=cid%>++;
		if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
			<%
			log4jCodeGenerateUtil.commit(node);
			%>
			commitCounter_<%=cid%>=0;
		}
		<%
	}
}
%>

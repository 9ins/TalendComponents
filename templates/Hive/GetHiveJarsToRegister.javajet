<%@ jet 
%>
	class GetHiveJarsToRegister_<%=cid%> extends routines.system.GetJarsToRegister {
		
		private String uploadJarToHDFS(String jar) throws Exception {
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/GetFileSystem.javajet"%>
			<%
			(new GetFileSystem()).invoke(connectionInformationNode, cid);
			%>
			
			String pathUsername_<%=cid%> = username_<%=cid%> == null ? org.apache.hadoop.security.UserGroupInformation.getLoginUser().getShortUserName() : username_<%=cid%>;
			fs_<%=cid%>.mkdirs(new org.apache.hadoop.fs.Path("/user/" + pathUsername_<%=cid%> + "/tmp"), new org.apache.hadoop.fs.permission.FsPermission(org.apache.hadoop.fs.permission.FsAction.ALL, org.apache.hadoop.fs.permission.FsAction.ALL, org.apache.hadoop.fs.permission.FsAction.ALL));
			fs_<%=cid%>.copyFromLocalFile(false, true, new org.apache.hadoop.fs.Path(jar), new org.apache.hadoop.fs.Path("/user/" + pathUsername_<%=cid%> + "/tmp"));
			return <%=fsDefaultName%> + "/user/" + pathUsername_<%=cid%> + "/tmp/" + new java.io.File(jar).getName();
		}
		
		public String replaceJarPaths(String originalClassPathLine) throws Exception {
			String classPathLine = super.replaceJarPaths(originalClassPathLine);
			String hdfsPath = uploadJarToHDFS(classPathLine);
			return hdfsPath;
		}
	}
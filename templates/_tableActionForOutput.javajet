<%@ jet
%>
<%
//issue 0010346 Parallelization crash with "Drop table if exists and create"
Boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
String dbms=ElementParameterParser.getValue(node, "__MAPPING__");
boolean convertToUppercase_tableAction = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
if (!isParallelize) {
//end issue 0010346 Parallelization crash with "Drop table if exists and create"
	
	manager = getManager(dbmsId, cid);
    
    String ending="";
    
	//TODO need to remove it as it seems not useful now
    if("VECTORWISE".equalsIgnoreCase(dbmsId)) {
        ending="WITH STRUCTURE = VECTORWISE";
    }
	
    boolean useCascade = "true".equals(ElementParameterParser.getValue(node,"__USE_CASCADE__"));
    
    //bugfix: TDI-31650
    boolean setQueryTimeOut = false;
    String queryTimeOutInSeconds = null;
    if(SYBASE.equalsIgnoreCase(dbmsId)){
        setQueryTimeOut = "true".equals(ElementParameterParser.getValue(node,"__SET_QUERY_TIMEOUT__"));
        queryTimeOutInSeconds = ElementParameterParser.getValue(node,"__QUERY_TIMEOUT_IN_SECONDS__");
    }

    if(!("NONE").equals(tableAction)) {
        if(("DROP_CREATE").equals(tableAction)) {
        %>
            java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtDrop_<%=cid%>.setQueryTimeout(Integer.valueOf(Integer.valueOf(<%= queryTimeOutInSeconds %>)));
                    <%
               }
             %>
            <%dbLog.table().dropTry(dbLog.var("tableName"));%>
            stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>" <%=(useCascade ? " + \" cascade\"" : "")%>);
            <%dbLog.table().dropDone(dbLog.var("tableName"));%>
            stmtDrop_<%=cid%>.close();
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtCreate_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                    <%
               }
             %>
            <%dbLog.table().createTry(dbLog.var("tableName"));%>
            <%
            if(isDynamic) {
                List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                if(conns_dynamic!=null && conns_dynamic.size()>0){
                    String query=manager.getCreateTableSQL(stmtStructure);
                    %>
                    stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(<%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                    <%
                }
            } else {
            %>
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
            <%
            }
            %>
            <%dbLog.table().createDone(dbLog.var("tableName"));%>
            stmtCreate_<%=cid%>.close();
        <%
        } else if(("CREATE").equals(tableAction)) {
        %>
            java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtCreate_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                    <%
               }
             %>
            <%dbLog.table().createTry(dbLog.var("tableName"));%>
            <%
            if(isDynamic) {
                List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                if(conns_dynamic!=null && conns_dynamic.size()>0){
                    String query=manager.getCreateTableSQL(stmtStructure);
                    %>
                    stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(<%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                <%
                }
            } else {
            %>
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
            <%
            }
            %>
            <%dbLog.table().createDone(dbLog.var("tableName"));%>
            stmtCreate_<%=cid%>.close();
        <%
        } else if(("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction)) {
            boolean tableNameCaseSensitive=false;
            if(DB2.equalsIgnoreCase(dbmsId)||POSTGRESQL.equalsIgnoreCase(dbmsId)||GREENPLUM.equalsIgnoreCase(dbmsId)||POSTGREPLUS.equalsIgnoreCase(dbmsId)){
                tableNameCaseSensitive=true;
            }
            %>
            <%
            //to fixed: bug8422
            if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
            %>

                <%//bug22719: informix use independent connection, should remove this code after use shared connection
                if(INFORMIX.equalsIgnoreCase(dbmsId)){
                    String dbnameKey = ElementParameterParser.getValue(node, "__DBNAME__");
                    String dbserverKey = ElementParameterParser.getValue(node, "__DBSERVER__");
                    String dbhostKey = ElementParameterParser.getValue(node, "__HOST__");
                    String dbportKey = ElementParameterParser.getValue(node, "__PORT__");
                    String tableSchemaKey = ElementParameterParser.getValue(node,"__SCHEMA_DB__");
                    %>
                    String keyCheckTable_<%=cid %> = "[Informix]"+"["+<%=dbhostKey%>+"]["+<%=dbportKey%>+"]["+<%=dbnameKey%>+"]["+<%=dbserverKey%>+"]["+<%=tableSchemaKey%>+"]"+ "[checktable]" + "[" + <%=table%> + "]";
                <%}else{%>
                    // [%connection%][checktable][tableName]
                    String keyCheckTable_<%=cid %> = conn_<%=cid%> + "[checktable]" + "[" + <%=table%> + "]";
                <%}%>

                if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_<%=cid %>)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}
            <%
            }
            %>
                            <%
                            /*
                            case multi connection access the same db, that maybe have a locked in System table(e.g mssql).
                            so in mssql use "Select" checked the table whether exist.
                            */
                            //TODO we will use like "select" sql intead of use system table to checked table?
                            if(MSSQL.equalsIgnoreCase(dbmsId)) {
                            %>
                                java.sql.Statement isExistStmt_<%=cid%> = conn_<%=cid%>.createStatement();
                                boolean whetherExist_<%=cid%> = false;
                                try {
                                    isExistStmt_<%=cid%>.execute("SELECT TOP 1 1 FROM [" + tableName_<%=cid%> + "]" );
                                    whetherExist_<%=cid%> = true;
                                } catch (java.lang.Exception e){
                                    whetherExist_<%=cid%> = false;
                                }
                                isExistStmt_<%=cid%>.close();
                            <%
                            } else if (ORACLE.equalsIgnoreCase(dbmsId) || SAPHANA.equalsIgnoreCase(dbmsId)) {
                            %>
                                <%=manager.generateCode4TabelExist()%>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                if(tableNameForSearch_<%=cid%>.indexOf("\"")==-1){
                                    tableNameForSearch_<%=cid%> = tableNameForSearch_<%=cid%>.toUpperCase();
                                }else{
                                    tableNameForSearch_<%=cid%> = tableNameForSearch_<%=cid%>.replaceAll("\"","");
                                }
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, dbschemaForSearch_<%=cid%>, tableNameForSearch_<%=cid%>, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                if(rsTable_<%=cid%>.next()) {
                                    whetherExist_<%=cid%> = true;
                                }
                                rsTable_<%=cid%>.close();

                            <%
                            } else if ( SYBASE.equalsIgnoreCase(dbmsId)
                                        || INFORMIX.equalsIgnoreCase(dbmsId) ) {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                while(rsTable_<%=cid%>.next()) {
                                    String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                    String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                    if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(<%=table%>)
                                        && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || dbschema_<%=cid%>.trim().length() ==0)) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                                rsTable_<%=cid%>.close();
                            <%
                            } else if( DB2.equalsIgnoreCase(dbmsId) || TERADATA.equalsIgnoreCase(dbmsId)){
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                while(rsTable_<%=cid%>.next()) {
                                    String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                    String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                    if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>((<%=table%>)<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)
                                        && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || (dbschema_<%=cid%>.trim().length() ==0 && dbUser_<%=cid%>.equalsIgnoreCase(schema_<%=cid%>)))) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                                rsTable_<%=cid%>.close();
                            <%
                            } else if (GREENPLUM.equalsIgnoreCase(dbmsId) || POSTGRESQL.equalsIgnoreCase(dbmsId) || POSTGREPLUS.equalsIgnoreCase(dbmsId) || VERTICA.equalsIgnoreCase(dbmsId)) {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                String defaultSchema_<%=cid%> = "public";
                                if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_<%=cid%> = conn_<%=cid%>.createStatement();
                                    java.sql.ResultSet rsSchema_<%=cid%> = stmtSchema_<%=cid%>.executeQuery("select current_schema() ");
                                    while(rsSchema_<%=cid%>.next()){
                                        defaultSchema_<%=cid%> = rsSchema_<%=cid%>.getString("current_schema");
                                    }
                                    rsSchema_<%=cid%>.close();
                                    stmtSchema_<%=cid%>.close();
                                }
                                while(rsTable_<%=cid%>.next()) {
                                    String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                    String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                    if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(<%=table%>)
                                        && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || ((dbschema_<%=cid%> ==null || dbschema_<%=cid%>.trim().length() ==0) && defaultSchema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(schema_<%=cid%>)))) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                                rsTable_<%=cid%>.close();
                            <%
                            } else if(EXASOL.equalsIgnoreCase(dbmsId)) {
                            %>
				            	String tableForSearch_<%=cid%> = <%=table%>;
				            	if(tableForSearch_<%=cid%> != null){
				            		if(tableForSearch_<%=cid%>.startsWith("\"") && tableForSearch_<%=cid%>.endsWith("\"")){
				            			tableForSearch_<%=cid%> =  tableForSearch_<%=cid%>.substring(1,tableForSearch_<%=cid%>.length()-1);
				            		}else{
				            			tableForSearch_<%=cid%> =  tableForSearch_<%=cid%>.toUpperCase();
				            		}
				            	}
				                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
				                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, conn_<%=cid%>.getSchema(), tableForSearch_<%=cid%>, new String[]{"TABLE"});
				                boolean whetherExist_<%=cid%> = false;
				               	if(rsTable_<%=cid%>.next()) {
									whetherExist_<%=cid%> = true;
								}
				                rsTable_<%=cid%>.close();
				            <%
                            } else if(REDSHIFT.equalsIgnoreCase(dbmsId)) {
                            %>
				                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, schemaForSearch_<%=cid%>, null, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                while(rsTable_<%=cid%>.next()) {
                                    if(rsTable_<%=cid%>.getString("TABLE_NAME").equalsIgnoreCase(tableForSearch_<%=cid%>)) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                                rsTable_<%=cid%>.close();
                            <%
                            } else {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_<%=cid%> = false;
                                while(rsTable_<%=cid%>.next()) {
                                    String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                    if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                                rsTable_<%=cid%>.close();
                            <%
                            }
                            %>
                            <%
                            if(("CREATE_IF_NOT_EXISTS").equals(tableAction)) {
                            %>
                                if(!whetherExist_<%=cid%>) {
                                    java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                                    <%
                                       if(setQueryTimeOut){
                                            %>
                                                      stmtCreate_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                                            <%
                                       }
                                     %>
                                    <%dbLog.table().createTry(dbLog.var("tableName"));%>
                                    <%
                                    if(isDynamic) {
                                        List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                                        if(conns_dynamic!=null && conns_dynamic.size()>0){
                                            String query=manager.getCreateTableSQL(stmtStructure);
                                            %>
                                            stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(<%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                                        <%
                                        }
                                    } else {
                                    %>
                                        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
                                    <%
                                    }
                                    %>
                                    <%dbLog.table().createDone(dbLog.var("tableName"));%>
                                    stmtCreate_<%=cid%>.close();
                                }
                            <%
                            } else {
                            %>
                                if(whetherExist_<%=cid%>) {
                                    java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();
                                    <%
                                       if(setQueryTimeOut){
                                            %>
                                                      stmtDrop_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                                            <%
                                       }
                                     %>
                                    <%dbLog.table().dropTry(dbLog.var("tableName"));%>
                                    stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>" <%=(useCascade ? " + \" cascade\"" : "")%>);
                                    <%dbLog.table().dropDone(dbLog.var("tableName"));%>
                                    stmtDrop_<%=cid%>.close();
                                }
                                java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
                                <%
                                   if(setQueryTimeOut){
                                        %>
                                                  stmtCreate_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                                        <%
                                   }
                                 %>
                                <%dbLog.table().createTry(dbLog.var("tableName"));%>
                                <%
                                if(isDynamic) {
                                    List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                                        String query=manager.getCreateTableSQL(stmtStructure);
                                        %>
                                        stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(<%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                                    <%
                                    }
                                } else {
                                %>
                                    stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
                                <%
                                }
                                %>
                                <%dbLog.table().createDone(dbLog.var("tableName"));%>
                                stmtCreate_<%=cid%>.close();
                            <%
                            }
                            %>
            <%
            //to fixed: bug8422
            if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
            %>
                            GlobalResource.resourceMap.put(keyCheckTable_<%=cid %>, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
            <%
            }
            %>
        <%
        } else if(("CLEAR").equals(tableAction)) {
        %>
            java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtClear_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                    <%
               }
             %>
            <%dbLog.table().clearTry(dbLog.var("tableName"));%>
            stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
            <%dbLog.table().clearDone(dbLog.var("tableName"));%>
            stmtClear_<%=cid%>.close();
        <%
        }else if(("TRUNCATE").equals(tableAction)) {
        %>
            java.sql.Statement stmtTruncCount_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtTruncCount_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                    <%
               }
             %>
            java.sql.ResultSet rsTruncCount_<%=cid%> = stmtTruncCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
            int rsTruncCountNumber_<%=cid%> = 0;
            if(rsTruncCount_<%=cid%>.next()) {
                rsTruncCountNumber_<%=cid%> = rsTruncCount_<%=cid%>.getInt(1);
            }
            rsTruncCount_<%=cid%>.close();
            stmtTruncCount_<%=cid%>.close();
            java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement();
            <%
               if(setQueryTimeOut){
                    %>
                              stmtTrunc_<%=cid%>.setQueryTimeout(Integer.valueOf(<%= queryTimeOutInSeconds %>));
                    <%
               }
             %>
            <%dbLog.table().truncateTry(dbLog.var("tableName"));%>
            <%if(DB2.equalsIgnoreCase(dbmsId)){%>
                conn_<%=cid%>.commit();
            <%}%>
            stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
            <%if(INFORMIX.equalsIgnoreCase(dbmsId)){%>
                if(!conn_<%= cid %>.getAutoCommit()){
                    conn_<%=cid%>.commit();
                }
            <%}%>
            <%dbLog.table().truncateDone(dbLog.var("tableName"));%>
            deletedCount_<%=cid%> += rsTruncCountNumber_<%=cid%>;
            stmtTrunc_<%=cid%>.close();
        <%
        } else if(("TRUNCATE_REUSE_STORAGE").equals(tableAction)) {
        %>
            java.sql.Statement stmtTruncCount_<%=cid%> = conn_<%=cid%>.createStatement();
            java.sql.ResultSet rsTruncCount_<%=cid%> = stmtTruncCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
            java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement();
            <%dbLog.table().truncateReuseStorageTry(dbLog.var("tableName"));%>
            <%if(DB2.equalsIgnoreCase(dbmsId)){%>
                conn_<%=cid%>.commit();
            <%}%>
            stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateReuseStroageTableSQL()%>");
            <%dbLog.table().truncateReuseStorageDone(dbLog.var("tableName"));%>
            while(rsTruncCount_<%=cid%>.next()) {
                deletedCount_<%=cid%> += rsTruncCount_<%=cid%>.getInt(1);
            }
            rsTruncCount_<%=cid%>.close();
            stmtTruncCount_<%=cid%>.close();
            stmtTrunc_<%=cid%>.close();
        <%
        }
    }
//issue 0010346 Parallelization crash with "Drop table if exists and create"
}
//end issue 0010346 Parallelization crash with "Drop table if exists and create"
%>

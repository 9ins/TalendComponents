		<%@ jet 
			imports="
			org.talend.core.model.process.INode 
			org.talend.core.model.process.ElementParameterParser 
			org.talend.designer.codegen.config.CodeGeneratorArgument
			org.talend.core.model.process.IConnection
			org.talend.core.model.process.IConnectionCategory
			java.util.Map
			java.util.List
			org.talend.core.model.metadata.IMetadataTable
			org.talend.core.model.metadata.IMetadataColumn
		" 
		%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		boolean TYPE_FLOW = "true".equals(ElementParameterParser.getValue(node, "__TYPE_FLOW__"));
		String TYPE = ElementParameterParser.getValue(node, "__TYPE__");
		String INDEX = ElementParameterParser.getValue(node, "__INDEX__");
		String ID = ElementParameterParser.getValue(node, "__ID__");
		String TYPE1 = ElementParameterParser.getValue(node, "__TYPE1__");
		String INDEX1 = ElementParameterParser.getValue(node, "__INDEX1__");
		String ID1 = ElementParameterParser.getValue(node, "__ID1__");		

		boolean DIE_ON_ERROR = Boolean.parseBoolean(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
%>
	org.elasticsearch.action.bulk.BulkRequest <%=cid%>_request = new org.elasticsearch.action.bulk.BulkRequest();
	<%=cid%>_bulkList = (java.util.ArrayList<java.util.Map<String, Object>>)globalMap.get("<%=cid%>_bulkMap");
	if(<%=cid%>_bulkList.size() > 0) {
		try {
			for(java.util.Map map : <%=cid%>_bulkList) {
				String type = map.remove("<%=TYPE_FLOW?TYPE:TYPE1%>")+"";
				String index = map.remove("<%=TYPE_FLOW?INDEX:INDEX1%>")+"";
				String id = map.remove("<%=TYPE_FLOW?ID:ID1%>")+"";
				if(<%=cid%>_TIMEOUT > 0) {
					<%=cid%>_request.timeout(org.elasticsearch.common.unit.TimeValue.timeValueMinutes(<%=cid%>_TIMEOUT));
				}	
				if(type.equalsIgnoreCase("INDEX")) {
					<%=cid%>_request.add(new org.elasticsearch.action.index.IndexRequest(index).id(id).source(map, org.elasticsearch.common.xcontent.XContentType.JSON));
				} else if(type.equalsIgnoreCase("UPDATE")) {
					<%=cid%>_request.add(new org.elasticsearch.action.update.UpdateRequest(index, id).doc(map, org.elasticsearch.common.xcontent.XContentType.JSON));
				} else if(type.equalsIgnoreCase("DELETE")) {
					<%=cid%>_request.add(new org.elasticsearch.action.delete.DeleteRequest(index, id));
				} else {
					throw new RuntimeException("Request type is wrong: "+type);
				}
			}
			org.elasticsearch.action.bulk.BulkResponse <%=cid%>_res = <%=cid%>_client.bulk(<%=cid%>_request, org.elasticsearch.client.RequestOptions.DEFAULT);
			java.util.List <%=cid%>_resList = java.util.Arrays.asList(<%=cid%>_res.getItems()).stream().map(m -> m.isFailed()+"|"+m.getId()+"|"+m.getIndex()+"|"+m.getFailureMessage()).collect(java.util.stream.Collectors.toList());
			((List)globalMap.get("<%=cid%>_RESPONSE")).addAll(<%=cid%>_resList);
		} catch(Exception e) {
			if(<%=cid%>_DIE_ON_ERROR) {
				throw e;
			}
			e.printStackTrace();
		}		
	}
	
	if(<%=cid%>_timer != null)
		<%=cid%>_timer.cancel();
	if(<%=cid%>_client != null)
		<%=cid%>_client.close();
		

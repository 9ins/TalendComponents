<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
%>
			if(<%=cid%>_runMode == 2 && <%=cid%>_recordCount >= <%=cid%>_RECORD_COUNT) {
				break;
			}
        } //end records for loop

	    if(<%=cid%>_recordCount != 0 && <%=cid%>_recordCount % <%=cid%>_COMMIT_COUNT == 0) {
				java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.clients.consumer.OffsetAndMetadata> <%=cid%>_offsetMap = (java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.clients.consumer.OffsetAndMetadata>)globalMap.get("<%=cid%>_OFFSET_MAP");
				if(<%=cid%>_COMMIT_TYPE.equalsIgnoreCase("SYNC")) {
					<%=cid%>_consumer.commitSync(<%=cid%>_offsetMap);
				} else {
					<%=cid%>_consumer.commitAsync(<%=cid%>_offsetMap, new org.apache.kafka.clients.consumer.OffsetCommitCallback() {
				    	public void onComplete(java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.clients.consumer.OffsetAndMetadata> offsets, java.lang.Exception exception) {
				            if(exception != null) {
				            	exception.printStackTrace();
				            }
				        }
				    });
				}
				//System.out.println("COMMIT: "+<%=cid%>_offsetMap.toString());    
		}
	} //end while
} catch(Exception e) {
  	if(<%=cid%>_DIE_ON_ERROR) {
  		throw e;
   	}
   	e.printStackTrace();
} finally {
    <%=cid%>_consumer.close();
    //Dely milliseconds for termination.
    Thread.sleep(1000);
}

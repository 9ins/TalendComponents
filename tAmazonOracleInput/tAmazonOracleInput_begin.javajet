<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.Map
		java.util.List
" 
%>
	<%@ include file="../templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
	
		private INode node = null;
		
		public void beforeComponentProcess(INode node){
	    	super.beforeComponentProcess(node);
	    	this.node = node;
	    }
	
		public void setURL(INode node) {
			
			String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");
			String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
			String jdbcURL = ElementParameterParser.getValue(node, "__JDBC_URL__");
%>
            	String url_<%=cid%> = null;
<%
            	if(("ORACLE_SID").equals(connectionType)) {
%>
            		url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
            	} else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
%>
            		url_<%=cid %> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
<%
            	} else if(("ORACLE_OCI").equals(connectionType)) {
            	    %>
            	    url_<%=cid %> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;
<%
            	}else if(("ORACLE_WALLET").equals(connectionType)) {
%>
	    			url_<%=cid%> = <%=jdbcURL%>;
<%
				}
%>

<%
		}
		
		public String getDirverClassName(INode node){
			String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__"); 
			if("ORACLE_11".equals(dbVersion) || "ORACLE_11-6".equals(dbVersion) || "ORACLE_12".equals(dbVersion) ){
			    return "oracle.jdbc.OracleDriver";	
			}else {
				return "oracle.jdbc.driver.OracleDriver";	
			}
		}
		
		public void createConnection(INode node) {
			cid = node.getUniqueName();
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
	    	dbport = ElementParameterParser.getValue(node, "__PORT__");
	    	dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    	dbuser = ElementParameterParser.getValue(node, "__USER__");

	 		String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
%>
			String driverClass_<%=cid%> = "<%=this.getDirverClassName(node) %>";
			java.lang.Class.forName( driverClass_<%=cid%>);
			<%this.setURL(node);%>
	        String dbUser_<%=cid %> = <%=dbuser%>;
	        
    		<%
    		String passwordFieldName = "__PASS__";
    		%>
    		
    		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		   	
	        String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
	        
<%
			log4jCodeGenerateUtil.debugConnectionParams(node);
			log4jCodeGenerateUtil.connect_begin();
			if(("ORACLE_WALLET").equals(connectionType)) {
%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
<%
			}else if (dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
<%
			} else {
%>
			String atnParams_<%=cid%> = <%=dbproperties%>;
			atnParams_<%=cid%> = atnParams_<%=cid%>.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
			atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
			atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
			atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(atnParams_<%=cid%>.getBytes()));
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
<%
			}
			log4jCodeGenerateUtil.connect_end();
		}
		
		public void createStatement(INode node) {
			
			String useCursor= ElementParameterParser.getValue(node, "__USE_CURSOR__");
			String cursorSize= ElementParameterParser.getValue(node, "__CURSOR_SIZE__");
			if(!("true").equals(useCursor)) {
				 super.createStatement(node);
			}else {
            	super.createMinValueStatement(node);
%>
                stmt_<%=cid %>.setFetchSize(<%=cursorSize %>);
				
<%
            }
		}
		//-----------according schema type to generate ResultSet
		public void generateStringResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String trimMethod) {
			String columnType = column.getType();
			if(columnType != null && ("CLOB").equals(columnType)) {
%>
				java.io.Reader reader_<%=cid%> = rs_<%=cid %>.getCharacterStream(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
				java.io.BufferedReader br_<%=cid%> = null;
				if(reader_<%=cid%> != null) {
					br_<%=cid%> = new java.io.BufferedReader(reader_<%=cid%>);                 	                        
 	                StringBuffer content_<%=cid%> = new StringBuffer();
 	                int c_<%=cid%> =0;
 	                while( (c_<%=cid%> = br_<%=cid%>.read()) != -1) {
 	                	content_<%=cid%>.append((char)c_<%=cid%>);
					}
 	                br_<%=cid%>.close();
					<%=firstConnName%>.<%=column.getLabel()%> = content_<%=cid%>.toString();
				} else {
					<%=firstConnName%>.<%=column.getLabel()%> = null;
				}                 	                    
<%
			} else {
%>
			 	    tmpContent_<%=cid%> = rs_<%=cid %>.getString(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
			        if(tmpContent_<%=cid%> != null) {
			            <%=firstConnName%>.<%=column.getLabel()%> = tmpContent_<%=cid%><%=trimMethod%>;
			        } else {
			            <%=firstConnName%>.<%=column.getLabel()%> = null;
			        }                 	                    
<%
			}
	    }
	    
	   	public void generateBytesResultSet(String firstConnName, IMetadataColumn column, int currentColNo) {
%>
			byte [] tmpBytes_<%=cid%> = rs_<%=cid %>.getBytes(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
			if(tmpBytes_<%=cid%> != null) {
				<%=firstConnName%>.<%=column.getLabel()%> = tmpBytes_<%=cid%>;
			} else {
				<%=firstConnName%>.<%=column.getLabel()%> = null;
			}		
<%
	    }

	   	public void generateOthersResultSet(String firstConnName, IMetadataColumn column, int currentColNo, String typeToGenerate) {
	   		boolean isConvert = ("true").equals(ElementParameterParser.getValue(node, "__IS_CONVERT_XMLTYPE__"));    
			List<Map<String, String>> convertColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONVERT_XMLTYPE__");  
	   		
			if(("Object").equals(typeToGenerate)){
			
				boolean needConvert = false;
	   			String convertToJavaType = "";
				if (isConvert && convertColumns.size() > 0) {
					for(java.util.Map<String, String> convertcolumn : convertColumns) {
						if (convertcolumn.get("REFCOL").equals(column.getLabel()) ) {
							needConvert = true;
							convertToJavaType = convertcolumn.get("CONVETTYPE");
						}
					}
				} 
				
%>
				Object tmpObj_<%=currentColNo%>_<%=cid %> = rs_<%=cid %>.getObject(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
				if(tmpObj_<%=currentColNo%>_<%=cid %> != null) {
<%
				if (needConvert && "String".equals(convertToJavaType)) {
%>
					<%=firstConnName%>.<%=column.getLabel()%> = oracle.xdb.XMLType.createXML((oracle.sql.OPAQUE) tmpObj_<%=currentColNo%>_<%=cid %>).getStringVal();
<%
				} else {
%>
					<%=firstConnName%>.<%=column.getLabel()%> = tmpObj_<%=currentColNo%>_<%=cid %>;
<%
				}
%>
				} else {
<%
					if(column.isNullable()) {
%>
						<%=firstConnName%>.<%=column.getLabel()%> = null;
<%
					} else {
%>    
						throw new RuntimeException("Null value in non-Nullable column");
<%    
					}
%>
				}
<%
			} else {
%>
				if(rs_<%=cid %>.getObject(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>) != null) {
					<%=firstConnName%>.<%=column.getLabel()%> = rs_<%=cid %>.get<%=typeToGenerate%>(<%if(isDynamic){%>column_index_<%=cid%><%}else{%><%=currentColNo%><%}%>);
				} else {
<%
					if(column.isNullable()) {
%>
						<%=firstConnName%>.<%=column.getLabel()%> = null;
<%
					} else {
%>    
				throw new RuntimeException("Null value in non-Nullable column");
<%    
					}
%>
				}
<%
			}
	    }	    
	    //---------end according schema type to generate ResultSet
	}//end class
	
	dbInputBeginUtil = new DBInputBeginUtil();
%>

    
	<%@ include file="../templates/DB/Input/AbstractDBInputBegin.javajet"%>
	
	

